# Copyright (C) 2020, RTE (http://www.rte-france.com)
# SPDX-License-Identifier: Apache-2.0

# This Ansible playbook configures the networks and defines the hostnames.
# It can be used on cluster machines and VMs. It is called by the playbook
# setup_playbook.yaml, but can also be called independently, especially to
# configure VMs.

---
- name: Configure OVS
  hosts: hypervisors
  vars:
      ovs_bridge_list: "{{ ovs_bridges | default([]) }}"
  tasks:
      - name: Ensures /opt/setup dir exists
        file: path=/opt/setup state=directory
      - name: Clean setup_ovs.d directory
        file: state=absent path=/opt/setup/setup_ovs.d/
      - name: Create /opt/setup/setup_ovs.d directory
        file: path=/opt/setup/setup_ovs.d state=directory
      - name: Install setup_ovs.sh
        template:
            src: ../templates/setup_ovs.sh
            dest: /opt/setup/setup_ovs.sh
            owner: root
            group: root
            mode: '0755'
      - name: Install setup_ovs.d scripts
        template:
            src: "../templates/setup_ovs_{{ item.type }}.sh"
            dest: "/opt/setup/setup_ovs.d/{{ item.name }}"
            owner: root
            group: root
            mode: '0755'
        loop: "{{ ovs_bridge_list }}"
      - name: Install setup_ovs.server
        template:
            src: ../templates/setup_ovs.service
            dest: /etc/systemd/system
            owner: root
            group: root
            mode: '0644'
        notify:
            - Enable setup_ovs
  handlers:
      - name: Enable setup_ovs
        ansible.builtin.systemd:
            name: setup_ovs
            daemon_reload: yes
            enabled: yes

- name: Apply Open vSwitch configuration
  hosts: hypervisors
  vars:
      apply_config: "{{ apply_network_config | default(false) }}"
  tasks:
      - name: Restart setup_ovs
        ansible.builtin.systemd:
            name: setup_ovs
            state: restarted
        when:
            apply_config

- name: Configure Network
  hosts: cluster_machines
  vars_files:
    - ../vars/network_vars.yml
  roles:
    - systemd_networkd

- name: Network configuration
  hosts: cluster_machines
  vars:
      apply_config: "{{ apply_network_config | default(false) }}"
  tasks:
      - name: Restart systemd-networkd
        ansible.builtin.systemd:
            name: systemd-networkd
            state: restarted
        when:
            apply_config

- name: Configure hosts and hostname
  hosts: cluster_machines
  tasks:
      - name: Set hostname
        hostname:
            name: "{{ inventory_hostname }}"
            use: systemd
      - name: Build hosts file
        lineinfile:
            dest: /etc/hosts
            regexp: '.*{{ item }}$'
            line: "{{ hostvars[item].ip_addr }} {{item}}"
            state: present
        when: hostvars[item].ip_addr is defined
        loop: "{{ groups['cluster_machines'] }}"
      - name: Add rbd in hosts file
        replace:
            path: /etc/hosts
            regexp: '^{{ ip_addr }} {{ inventory_hostname }}$'
            replace: '{{ ip_addr }} rbd {{ inventory_hostname }}'

- name: Configure NTP
  hosts: cluster_machines
  tasks:
      - name: Set NTP configuration in /etc/systemd/timesyncd.conf
        lineinfile:
            dest: /etc/systemd/timesyncd.conf
            regexp: '{{ item.regexp }}'
            line: '{{ item.line   }}'
            insertafter: '\[Time\]'
            backrefs: true
            create: true
            state: present
        with_items:
            - regexp: '^\s*#?\s*(NTP=).*$'
              line: 'NTP={{ ntp_servers }}'

            - regexp: '^\s*#?\s*(FallbackNTP=).*$'
              line: 'FallbackNTP={{ fallback_ntp_servers | default("") }}'
        notify:
            - Restart systemd timesyncd

  handlers:
      - name: Restart systemd timesyncd
        ansible.builtin.service:
            name: systemd-timesyncd
            state: restarted
